# import rclpy #rospy
# from rclpy.node import Node
# from sensor_msgs.msg import JointState
# from gazebo_msgs.msg import ModelState, ModelStates
# from gazebo_msgs.srv import SetModelState

# class JointStatesSubscriberPlugin:
#     def __init__(self):
#         super().__init__('joint_states_subscriber_plugin')
#         self.joint_positions = {}

#         self.subscription = self.create_subscription(
#             JointState,
#             '/joint_states',
#             self.joint_states_callback,
#             10
#         )
#         self.set_model_state = self.create_client(SetModelState, '/gazebo/set_model_state')

#     def joint_states_callback(self, msg):
#         for joint_name, position in zip(msg.name, msg.position):
#             self.joint_positions[joint_name] = position

#         self.actuate_robot()

#     def actuate_robot(self):
#         # Apply the joint positions to the simulated robot
#         model_state = ModelState()
#         model_state.model_name = 'your_robot_model_name'

#         for joint_name, position in self.joint_positions.items():
#             model_state.pose.position.z = position
#             model_state.twist.linear.x = 0.0
#             model_state.twist.linear.y = 0.0
#             model_state.twist.linear.z = 0.0
#             model_state.twist.angular.x = 0.0
#             model_state.twist.angular.y = 0.0
#             model_state.twist.angular.z = 0.0
#             model_state.reference_frame = 'world'

#             model_state.pose.orientation.x = 0.0
#             model_state.pose.orientation.y = 0.0
#             model_state.pose.orientation.z = 0.0
#             model_state.pose.orientation.w = 0.0

#             if self.set_model_state_client.wait_for_service(timeout_sec=1.0):
#                 future = self.set_model_state_client.call_async(SetModelState.Request(model_state=model_state))
#                 rclpy.spin_until_future_complete(self, future)
#                 if future.result() is not None:
#                     self.get_logger().info('Set model state successfully')
#                 else:
#                     self.get_logger().error('Failed to set model state')
#             else:
#                 self.get_logger().error('Service /gazebo/set_model_state not available')

# def main(args=None):
#     rclpy.init(args=args)
#     plugin = JointStatesSubscriberPlugin()
#     rclpy.spin(plugin)
#     plugin.destroy_node()
#     rclpy.shutdown()

# if __name__ == '__main__':
#     main()

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import JointState
#from ros_pybullet_interface.message_interface.msg import JointInfo
#from ros_pybullet_interface.message_interface.srv import CalculateInverseKinematics

class JointStatesSubscriberPlugin(Node):
    def __init__(self):
        super().__init__('joint_states_subscriber_plugin')
        self.joint_positions = {}

        self.subscription = self.create_subscription(
            JointState,
            '/joint_states',
            self.joint_states_callback,
            10
        )
        self.set_joint_state_client = self.create_client(CalculateInverseKinematics, '/pybullet/set_joint_state')

    def joint_states_callback(self, msg):
        for joint_name, position in zip(msg.name, msg.position):
            self.joint_positions[joint_name] = position

        self.actuate_robot()

    def actuate_robot(self):
        # Apply the joint positions to the simulated robot
        joint_control = JointInfo()
        joint_control.model_name = 'your_robot_model_name'

        for joint_name, position in self.joint_positions.items():
            joint_control.joint_names.append(joint_name)
            joint_control.positions.append(position)

        if self.set_joint_state_client.wait_for_service(timeout_sec=1.0):
            future = self.set_joint_state_client.call_async(CalculateInverseKinematics.Request(joint_control=joint_control))
            rclpy.spin_until_future_complete(self, future)
            if future.result() is not None:
                self.get_logger().info('Set joint state successfully')
            else:
                self.get_logger().error('Failed to set joint state')
        else:
            self.get_logger().error('Service /pybullet/set_joint_state not available')

def main(args=None):
    rclpy.init(args=args)
    plugin = JointStatesSubscriberPlugin()
    rclpy.spin(plugin)
    plugin.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()